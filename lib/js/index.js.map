{"mappings":"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","sources":["compose.ts","option.ts","option-compose.gen.ts","result.ts","result-ok-compose.gen.ts","result-err-compose.gen.ts","array.ts","observer.ts","async-result.ts","async-result-ok-compose.gen.ts","async-result-err-compose.gen.ts","either.ts","either-left-compose.gen.ts","either-right-compose.gen.ts"],"sourcesContent":["type PipeFn<I, O> = (input: I) => O;\n\nexport function compose<In, Out> (fn1: PipeFn<In, Out>): (input: In) => Out;\nexport function compose<In, Out, A = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, Out>\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never, W = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, W>,\n    fn24: PipeFn<W, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never, W = never, X = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, W>,\n    fn24: PipeFn<W, X>,\n    fn25: PipeFn<X, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never, W = never, X = never, Y = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, W>,\n    fn24: PipeFn<W, X>,\n    fn25: PipeFn<X, Y>,\n    fn26: PipeFn<Y, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never, W = never, X = never, Y = never, Z = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, W>,\n    fn24: PipeFn<W, X>,\n    fn25: PipeFn<X, Y>,\n    fn26: PipeFn<Y, Z>,\n    fn27: PipeFn<Z, Out>,\n): (input: In) => Out;\nexport function compose(...fns) {\n    return it => fns.reduce((value, f) => f(value), it);\n}\n\nconst Compose = {\n    $: compose,\n    debug: <T>(msg?: string, logger: (prefix: string, obj: any, msg?: string) => void = (p, o, m) => console.log(p, m, o)) => (it: T): T => {\n        logger(`pipe.debug`, it, msg || '');\n        return it\n    }\n}\nexport default Compose;\n","import { optionCompose } from \"./option-compose.gen\";\n\nconst optionTag = Symbol('Option');\nconst noneTag = Symbol('None');\nconst someTag = Symbol('Some');\n\nexport class OptionUnwrapError extends Error {}\n\nexport type Option$None = {\n    readonly [optionTag]: typeof noneTag\n};\nexport type Option$Some<T> = {\n    readonly [optionTag]: typeof someTag;\n    readonly [someTag]: T;\n};\nexport type Option<T> = Option$None | Option$Some<T>;\n\n\n\nexport const isSome = <T>(option: Option<T | Option<T>>): option is Option$Some<T> => optionTag in option && option[optionTag] === someTag\nexport const isNone = <T>(option: Option<T | Option<T>>): option is Option$None => optionTag in option && option[optionTag] === noneTag\n\nexport const None = <T>(): Option<T> => ({ [optionTag]: noneTag });\n\nexport function Some<T>(value: T | Option<T>): Option<T> {\n    if (typeof value === 'object' && optionTag in value) {\n        return value as any;\n    }\n\n    return {\n        [optionTag]: someTag,\n        [someTag]: value as any\n    } as any;\n}\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrap = <T>(option: Option<T>): T => isSome(option) ? option[someTag] : (() => {\n    throw new OptionUnwrapError();\n})() as any;\n\nconst fromSome = <T>(some: Option$Some<T>): T => unwrap(some);\n\ninterface ToOptionArgs {\n    allowUndefined?: boolean;\n    allowNull?: boolean;\n}\nconst toOption = <T>(obj: T | undefined | null, opts: ToOptionArgs = {}): Option<T> => {\n    if ((opts.allowNull && obj === null) || (opts.allowUndefined && obj === undefined) || (obj !== undefined && obj !== null)) {\n        return Some(obj) as any;\n    }\n\n    return None()\n}\n\nfunction map<T, E>(mapper: (it: T) => E | Option<E>): (it: Option<T>) => Option<E> {\n    return (opt: Option<T>) => {\n        if (isSome(opt)) {\n            return Some(mapper(fromSome(opt)))\n        }\n    \n        return None()\n    }\n}\n\nconst Options = {\n    map,\n    of: toOption,\n    unwrap,\n    get: fromSome,\n    $: optionCompose\n}\n\nexport default Options","import Compose from \"./compose\";\nimport Options, { Option } from \"./option\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function optionCompose<T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Option<T0>) => Option<T2>\n\nexport function optionCompose<T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Option<T0>) => Option<T3>\n\nexport function optionCompose<T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Option<T0>) => Option<T4>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Option<T0>) => Option<T5>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Option<T0>) => Option<T6>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Option<T0>) => Option<T7>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Option<T0>) => Option<T8>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Option<T0>) => Option<T9>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Option<T0>) => Option<T10>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Option<T0>) => Option<T11>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Option<T0>) => Option<T12>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Option<T0>) => Option<T13>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Option<T0>) => Option<T14>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Option<T0>) => Option<T15>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Option<T0>) => Option<T16>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Option<T0>) => Option<T17>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Option<T0>) => Option<T18>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Option<T0>) => Option<T19>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Option<T0>) => Option<T20>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Option<T0>) => Option<T21>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Option<T0>) => Option<T22>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Option<T0>) => Option<T23>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Option<T0>) => Option<T24>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Option<T0>) => Option<T25>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Option<T0>) => Option<T26>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Option<T0>) => Option<T27>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Option<T0>) => Option<T28>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Option<T0>) => Option<T29>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Option<T0>) => Option<T30>\n\n\nexport function optionCompose(...fns: any[]) {\n    return Options.map((Compose.$ as any)(...fns));\n}\n","import { errCompose } from \"./result-err-compose.gen\";\nimport { okCompose } from \"./result-ok-compose.gen\";\n\nconst resultTag = Symbol('result');\nconst errorTag = Symbol('error');\nconst okTag = Symbol('ok');\n\nexport class ResultUnwrapError extends Error {\n    constructor(public uncaught: any, message?: string) {\n        super(message);\n    }\n}\n\nexport type Result$Error<T, E> = {\n    readonly [resultTag]: typeof errorTag\n    readonly [errorTag]: E;\n};\nexport type Result$Ok<T, E> = {\n    readonly [resultTag]: typeof okTag;\n    readonly [okTag]: T;\n};\n\nexport type Result<T, E = Error> = Result$Error<T, E> | Result$Ok<T, E>\n\nexport const Err = <T, E = Error>(e: E): Result<T, E> => ({\n    [resultTag]: errorTag,\n    [errorTag]: e\n});\n\nexport const Ok = <T, E = Error>(value: T): Result<T, E> => ({\n    [resultTag]: okTag,\n    [okTag]: value\n});\n\nexport const isOk = <T, E>(result: Result<T, E>): result is Result$Ok<T, E> => resultTag in result && result[resultTag] === okTag\nexport const isErr = <T, E>(result: Result<T, E>): result is Result$Error<T, E> => resultTag in result && result[resultTag] === errorTag\n\n/**\n * @unsafe\n * @throws\n */\n const unwrap = <T, E>() => (result: Result<T, E>): T => isOk(result) ? result[okTag] : (() => {\n    throw new ResultUnwrapError(result[errorTag]);\n})();\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrapErr = <T, E>() => (result: Result<T, E>): E => isErr(result) ? result[errorTag] : (() => {\n    throw new ResultUnwrapError(result[okTag]);\n})();\n\nconst fromOk = <T, E>() => (ok: Result$Ok<T, E>): T => unwrap<T, E>()(ok);\nconst fromErr = <T, E>() => (err: Result$Error<T, E>): E => unwrapErr<T, E>()(err);\nconst toResult = <T, E = Error>(fn: () => T): Result<T, E> => {\n    try {\n        return Ok(fn())\n    } catch(e) {\n        return Err(e)\n    }\n}\n\nfunction map<O1, O2, E>(mapper: (it: O1) => O2): (it: Result<O1, E>) => Result<O2, E>{\n    return (res: Result<O1, E>) => {\n        if (isOk(res)) {\n            return toResult(() => mapper(fromOk<O1, E>()(res)))\n        }\n    \n        return Err(res[errorTag])\n    }\n}\n\nfunction mapErr<O, E1, E2>(mapper: (it: E1) => E2): (it: Result<O, E1>) => Result<O, E2>{\n    return (res: Result<O, E1>) => {\n        if (isErr(res)) {\n            return Err(mapper(fromErr<O, E1>()(res)))\n        }\n    \n        return res\n    }\n}\n\nconst merge = <T>() => (either: Result<T, T>): T => {\n    if (isOk(either)) {\n        return fromOk<T, T>()(either)\n    } else {\n        return fromErr<T, T>()(either)\n    }\n}\n\nconst Results = {\n    unwrap,\n    getOk: fromOk,\n    getErr: fromErr,\n    of: toResult,\n    map,\n    mapErr,\n    $: okCompose,\n    $Err: errCompose,\n    merge\n}\n\nexport default Results","import Compose from \"./compose\";\nimport Results, { Result } from \"./result\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function okCompose<T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Result<T0>) => Result<T2>\n\nexport function okCompose<T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Result<T0>) => Result<T3>\n\nexport function okCompose<T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Result<T0>) => Result<T4>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Result<T0>) => Result<T5>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Result<T0>) => Result<T6>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Result<T0>) => Result<T7>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Result<T0>) => Result<T8>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Result<T0>) => Result<T9>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Result<T0>) => Result<T10>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Result<T0>) => Result<T11>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Result<T0>) => Result<T12>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Result<T0>) => Result<T13>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Result<T0>) => Result<T14>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Result<T0>) => Result<T15>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Result<T0>) => Result<T16>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Result<T0>) => Result<T17>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Result<T0>) => Result<T18>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Result<T0>) => Result<T19>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Result<T0>) => Result<T20>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Result<T0>) => Result<T21>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Result<T0>) => Result<T22>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Result<T0>) => Result<T23>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Result<T0>) => Result<T24>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Result<T0>) => Result<T25>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Result<T0>) => Result<T26>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Result<T0>) => Result<T27>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Result<T0>) => Result<T28>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Result<T0>) => Result<T29>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Result<T0>) => Result<T30>\n\n\nexport function okCompose(...fns: any[]) {\n    return Results.map((Compose.$ as any)(...fns));\n}\n","import Compose from \"./compose\";\nimport Results, { Result } from \"./result\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function errCompose<O, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Result<O, T0>) => Result<O, T2>\n\nexport function errCompose<O, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Result<O, T0>) => Result<O, T3>\n\nexport function errCompose<O, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Result<O, T0>) => Result<O, T4>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Result<O, T0>) => Result<O, T5>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Result<O, T0>) => Result<O, T6>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Result<O, T0>) => Result<O, T7>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Result<O, T0>) => Result<O, T8>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Result<O, T0>) => Result<O, T9>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Result<O, T0>) => Result<O, T10>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Result<O, T0>) => Result<O, T11>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Result<O, T0>) => Result<O, T12>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Result<O, T0>) => Result<O, T13>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Result<O, T0>) => Result<O, T14>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Result<O, T0>) => Result<O, T15>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Result<O, T0>) => Result<O, T16>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Result<O, T0>) => Result<O, T17>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Result<O, T0>) => Result<O, T18>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Result<O, T0>) => Result<O, T19>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Result<O, T0>) => Result<O, T20>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Result<O, T0>) => Result<O, T21>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Result<O, T0>) => Result<O, T22>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Result<O, T0>) => Result<O, T23>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Result<O, T0>) => Result<O, T24>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Result<O, T0>) => Result<O, T25>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Result<O, T0>) => Result<O, T26>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Result<O, T0>) => Result<O, T27>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Result<O, T0>) => Result<O, T28>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Result<O, T0>) => Result<O, T29>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Result<O, T0>) => Result<O, T30>\n\n\nexport function errCompose(...fns: any[]) {\n    return Results.mapErr((Compose.$ as any)(...fns));\n}\n","import Options, { Some, Option, None } from \"./option\";\nimport Results, { Err } from \"./result\";\n\nconst map = <T, E>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => E) => (array: T[]) => array.map(fn);\nconst filter = <T>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => boolean) => (array: T[]): T[] => array.filter(fn);\nconst find = <T>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => boolean) => (array: T[]) => Options.of(array.find(fn));\nconst every = <T>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => boolean) => (array: T[]) => array.every(fn);\nconst some = <T>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => boolean) => (array: T[]) => array.some(fn);\nconst reduce = <T, E>(fn: (accumulator: E, elem: T) => E, initialValue: E) => (array: T[]) => array.reduce(fn, initialValue)\nconst reduceRight = <T, E>(fn: (accumulator: E, elem: T) => E, initialValue: E) => (array: T[]) => array.reduceRight(fn, initialValue)\nconst foldl = <T>(fn: (left: T, right: T) => T, defaultValue: T) => (array: T[]) => array.length === 0 ? defaultValue : array.reduce(fn, array.at(0))\nconst foldr = <T>(fn: (left: T, right: T) => T, defaultValue: T) => (array: T[]) => array.length === 0\n    ? defaultValue\n    : array.slice(0, -1).reduceRight(fn, array.at(array.length - 1))\nconst isEmpty = <T>() => (array: T[]): boolean => array.length === 0\nconst fromString = (delimiter: string) => (str: string) => str.split(delimiter)\nconst join = (delimiter: string = '') => (array: string[]) => array.join(delimiter)\nconst sum = () => (array: number[]) => array.reduce((acc, it) => it + acc, 0)\nconst product = () => (array: number[]) => array.reduce((acc, it) => it * acc, 1)\nconst pow = (exp: number) => (array: number[]) => array.map(it => Math.pow(it, exp))\nconst powOf = (base: number) => (array: number[]) => array.map(it => Math.pow(base, it))\n/** Returns Result$Err if divisor === 0 */\nconst divBy = (divisor: number) => (array: number[]) => array.map(it => divisor === 0 ? Err(new Error('division by zero')) : Results.of(() => it / divisor))\n/** Returns Result$Err if any element === 0 */\nconst divOf = (dividend: number) => (array: number[]) => array.map(it => it === 0 ? Err(new Error('division by zero')) : Results.of(() => dividend / it))\nconst tuple = <T>(size = 2) => (array: T[]) => {\n    const out: Option<T>[][] = [];\n    for (let i = 0; i < array.length; i += size) {\n        const subarray: Option<T>[] = array.slice(i, i + size).map(Some)\n        while (subarray.length < size) {\n            subarray.push(None())\n        }\n        out.push(subarray)\n    }\n    return out;\n}\nconst flat = <T>() => (arrayOfArrays: T[][]): T[] => arrayOfArrays.flat()\nconst flatMap = <T, E>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => E[]) => (array: T[]): E[] => array.flatMap(fn)\nconst first = <T>() => (array: T[]) => array.length === 0 ? None() : Some(array[0])\nconst last = <T>() => (array: T[]) => array.length === 0 ? None() : Some(array.at(array.length - 1))\nconst append = <T>(elem: T) => (array: T[]) => [...array, elem];\nconst prepend = <T>(elem: T) => (array: T[]) => [elem, ...array];\nconst reverse = <T>() => (array: T[]) => [...array].reverse();\nconst between = (greaterThan: number, lowerThan: number) => (array: number[]) => array.filter(it => it > greaterThan && it < lowerThan)\nconst betweenEq = (greaterThanEqual: number, lowerThanEqual: number) => (array: number[]) => array.filter(it => it >= greaterThanEqual && it <= lowerThanEqual)\nconst gt = (greaterThan: number) => (array: number[]) => array.filter(it => it > greaterThan)\nconst gte = (greaterThanEqual: number) => (array: number[]) => array.filter(it => it >= greaterThanEqual)\nconst lt = (lowerThan: number) => (array: number[]) => array.filter(it => it < lowerThan)\nconst lte = (lowerThanEqual: number) => (array: number[]) => array.filter(it => it <= lowerThanEqual)\nconst debug = <T>(prefix: string = '') => (array: T[]) => {\n    array.forEach((it, i) => console.log(`debug${ prefix ? `[${prefix}]` : '' }[${i}] =`, it))\n    return [...array]\n}\nconst shiftr = <T>(by: number = 1) => ([...array]: T[]) => {\n    if (array.length === 0) {\n        return array\n    }\n\n    const byRem = by % array.length\n    return [...array.slice(array.length - byRem, array.length), ...array.slice(0, array.length - byRem)]\n}\nconst shiftl = <T>(by: number = 1) => ([...array]: T[]) => {\n    if (array.length === 0) {\n        return array\n    }\n\n    const byRem = by % array.length\n    return [...array.slice(array.length - byRem, array.length), ...array.slice(0, array.length - byRem)]\n}\n\ntype PrimitiveType<T> = T extends number\n    ? number\n    : T extends string\n    ? string\n    : T extends boolean\n    ? boolean\n    : never\n\nconst sorter = {\n    asc: <T>(left: PrimitiveType<T>, right: PrimitiveType<T>): number => {\n        if (typeof left !== typeof right) {\n            throw new Error(`Sort Error. Left and right elements are not the same type. Left is ${left} and right is ${right}`)\n        }\n\n        if (typeof left === 'number') {\n            return left - (right as number);\n        }\n\n        if (typeof left === 'boolean') {\n            return Number(left) - Number(right)\n        }\n\n        if (typeof left === 'string') {\n            return left.localeCompare(right as string)\n        }\n\n        throw new Error('Unreachable');\n    },\n    desc: <T>(left: PrimitiveType<T>, right: PrimitiveType<T>): number => sorter.asc(left, right) * (-1)\n};\n\n\nconst sort = <T>(fn: (left: T, right: T) => number = sorter.asc, customSort?: (array: T[], compare: (left: T, right: T) => number) => T[]) =>\n    (array: T[]) =>\n        customSort\n        ? customSort([...array], fn)\n        : [...array].sort(fn);\n\ntype Indexable = number | string | symbol \nconst concat = <T>(otherArray: T[]) => (array: T[]) => [...array, ...otherArray];\nconst toObject = <T>(fn: ((elem: T, idx: number) => Indexable) = (_, idx) => idx) => (array: T[]): Record<Indexable, T> =>\n    array.map((it, idx) => ({[fn(it, idx)]: it}))\n        .reduce((acc, it) => ({ ...acc, ...it }), {})\nconst fromObject = <T>(fn: (key: Indexable) => number) => (object: Record<Indexable, T>) =>\n    Object.entries(object)\n        .map(([key, value]) => [fn(key), value])\n        .sort(([a]: [number, T], [b]: [number, T]) => a - b)\n        .map(([_, it]: [number, T]) => it)\n\nconst uniqueBy = <T>(eq: (a: T, b: T) => boolean) => (array: T[]) => {\n    const out: T[] = [];\n    for (const elem of array) {\n        const found = out.some(it => eq(it, elem))\n        if (!found) {\n            out.push(elem)\n        }\n    }\n    return out\n}\n\nconst unique = <T>() => (array: PrimitiveType<T>[]): T[] => {\n    const out: PrimitiveType<T>[] = [];\n    for (const elem of array) {\n        const found = out.some(it => it === elem)\n        if (!found) {\n            out.push(elem)\n        }\n    }\n    return out as any\n}\n\nconst Arrays = {\n    map,\n    filter,\n    find,\n    some,\n    every,\n    sort,\n    sorter,\n    append,\n    debug,\n    divBy,\n    divOf,\n    first,\n    flat,\n    flatMap,\n    foldl,\n    foldr,\n    reduce,\n    reduceRight,\n    last,\n    prepend,\n    join,\n    reverse,\n    isEmpty,\n    sum,\n    product,\n    pow,\n    powOf,\n    tuple,\n    fromString,\n    shiftr,\n    shiftl,\n    concat,\n    unique,\n    uniqueBy,\n    between,\n    betweenEq,\n    gt,\n    lt,\n    gte,\n    lte,\n    toObject,\n    fromObject\n}\n\nexport default Arrays","type ListenerFn = () => any \n\nexport default class Observer {\n    private listeners: ListenerFn[] = []\n    private done = false;\n\n    once(fn: ListenerFn) {\n        if (this.done) {\n            fn();\n            return;\n        }\n\n        this.listeners.push(fn)\n    }\n\n    fire() {\n        this.done = true;\n        this.listeners.forEach(fn => fn())\n        this.listeners = [];\n    }\n\n    static nextLoop(fn: ListenerFn): Observer {\n        const obs = new Observer()\n        obs.once(fn)\n        setTimeout(() => obs.fire());\n        return obs;\n    }\n}","import { asyncResultErrCompose } from \"./async-result-err-compose.gen\";\nimport { asyncResultOkCompose } from \"./async-result-ok-compose.gen\";\nimport Observer from \"./observer\";\n\nconst resultTag = Symbol('async-result');\nconst errorTag = Symbol('error');\nconst okTag = Symbol('ok');\n\nexport class AsyncResultUnwrapError extends Error {\n    constructor(private uncaught: any, message?: string) {\n        super(message);\n    }\n}\n\nexport type AsyncResult$Error<_T, E> = {\n    readonly [resultTag]: {\n        done: boolean;\n        observer: Observer;\n        [errorTag]?: E\n    };\n};\nexport type AsyncResult$Ok<T, _E> = {\n    readonly [resultTag]: {\n        done: boolean;\n        observer: Observer;\n        [okTag]?: T;\n    };\n};\n\nexport type AsyncResult<T, E = Error> = AsyncResult$Error<T, E> | AsyncResult$Ok<T, E>\n\nexport const AsyncErr = <T, E = Error>(error?: E): AsyncResult<T, E> => {\n    const err = {\n        [resultTag]: {\n            done: false,\n            observer: Observer.nextLoop(() => {\n                err[resultTag][errorTag] = error;\n                err[resultTag].done = true;\n            })\n        }\n    }\n\n    return err\n}\n\nexport const AsyncOk = <T, E = Error>(value: T): AsyncResult<T, E> => {\n    const ok = {\n        [resultTag]: {\n            done: false,\n            observer: Observer.nextLoop(() => {\n                ok[resultTag][okTag] = value;\n                ok[resultTag].done = true;\n            })\n        }\n    }\n\n    return ok\n}\n\nexport const isAsyncOk = <T, E>() => (result: AsyncResult<T, E>): Promise<[true, AsyncResult$Ok<T, E>] | [false, AsyncResult$Error<T, E>]> => {\n    if (typeof result !== 'object' || !(resultTag in result)) {\n        return Promise.reject(new Error(`Given parameter ${result} is not a valid AsyncResult`));\n    }\n\n    return new Promise(resolve => {\n        result[resultTag].observer.once(() => {\n            const isOk = okTag in result[resultTag]\n            resolve([isOk, result])\n        });\n    });\n}\n\nexport const isAsyncErr = () => <T, E>(result: AsyncResult<T, E>): Promise<[true, AsyncResult$Error<T, E>] | [false, AsyncResult$Ok<T, E>]> => {\n    if (typeof result !== 'object' || !(resultTag in result)) {\n        return Promise.reject(new Error(`Given parameter ${result} is not a valid AsyncResult`));\n    }\n\n    return new Promise(resolve => {\n        result[resultTag].observer.once(() => {\n            const isErr = errorTag in result[resultTag]\n            resolve([isErr, result])\n        });\n    });\n}\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrap =  async <T, E>(result: AsyncResult<T, E>): Promise<T> => {\n    const [isOk, res] = await isAsyncOk()(result);\n    if (isOk) {\n        return res[resultTag][okTag] as T;\n    } else {\n        return Promise.reject(res[resultTag][errorTag]);\n    }\n}\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrapErr =  async <T, E>(result: AsyncResult<T, E>): Promise<E> => {\n    const [isErr, res] = await isAsyncErr()(result);\n    if (isErr) {\n        return res[resultTag][errorTag] as E;\n    } else {\n        return Promise.reject(res[resultTag][okTag]);\n    }\n}\n\nconst getAsyncOk = <T, E>(ok: AsyncResult$Ok<T, E>): Promise<T> => unwrap(ok);\nconst getAsyncErr = <T, E>(err: AsyncResult$Error<T, E>): Promise<E> => unwrapErr(err);\nconst toAsyncResult = <T, E = Error>(fn: () => Promise<T>): AsyncResult<T, E> => {\n    const res = {\n        [resultTag]: {\n            done: false,\n            observer: new Observer()\n        }\n    }\n\n    fn().then(ok => {\n        res[resultTag][okTag] = ok\n    }).catch(err => {\n        res[resultTag][errorTag] = err\n    }).finally(() => {\n        res[resultTag].done = true;\n        res[resultTag].observer.fire()\n    })\n\n    return res;\n}\n\nfunction map<O1, E, O2>(mapper: (it: O1) => O2 | AsyncResult<O2, E>): (it: AsyncResult<O1, E>) => AsyncResult<O2, E> {\n    return (res: AsyncResult<O1, E>): AsyncResult<O2, E> => {\n        const r = res[resultTag];\n        const out = {\n            [resultTag]: {\n                done: false,\n                observer: new Observer()\n            }\n        }\n\n        r.observer.once(() => {\n            if (okTag in r) {\n                try {\n                    const mappedResult = mapper(r[okTag]);\n\n                    if (typeof mappedResult === \"object\" && resultTag in mappedResult) {\n                        mappedResult[resultTag].observer.once(() => {\n                            if (okTag in mappedResult[resultTag]) {\n                                out[resultTag][okTag] = mappedResult[resultTag][okTag];\n                            } else {\n                                out[resultTag][errorTag] = mappedResult[resultTag][errorTag];\n                            }\n\n                            out[resultTag].done = true;\n                            out[resultTag].observer.fire();\n                        })\n                    } else {\n                        out[resultTag][okTag] = mappedResult;\n                        out[resultTag].done = true;\n                        out[resultTag].observer.fire();\n                    }\n\n                } catch(e) {\n                    out[resultTag][errorTag] = e;\n                    out[resultTag].done = true;\n                    out[resultTag].observer.fire();\n                }\n            } else {\n                out[resultTag][errorTag] = r[errorTag];\n                out[resultTag].done = true;\n                out[resultTag].observer.fire();\n            }\n        })\n\n        return out;\n    }\n}\n\nfunction mapErr<O, E1, E2>(mapper: (it: E1) => E2 | AsyncResult<O, E2>): (it: AsyncResult<O, E1>) => AsyncResult<O, E2> {\n    return (res: AsyncResult<O, E1>): AsyncResult<O, E2> => {\n        const r = res[resultTag];\n        const out = {\n            [resultTag]: {\n                done: false,\n                observer: new Observer()\n            }\n        }\n\n        r.observer.once(() => {\n            if (errorTag in r) {\n                try {\n                    const mappedResult = mapper(r[errorTag]);\n\n                    if (typeof mappedResult === \"object\" && resultTag in mappedResult) {\n                        mappedResult[resultTag].observer.once(() => {\n                            if (errorTag in mappedResult[resultTag]) {\n                                out[resultTag][errorTag] = mappedResult[resultTag][errorTag];\n                            } else {\n                                out[resultTag][okTag] = mappedResult[resultTag][okTag];\n                            }\n\n                            out[resultTag].done = true;\n                            out[resultTag].observer.fire();\n                        })\n                    } else {\n                        out[resultTag][errorTag] = mappedResult;\n                        out[resultTag].done = true;\n                        out[resultTag].observer.fire();\n                    }\n\n                } catch(e) {\n                    out[resultTag][okTag] = r[okTag];\n                    out[resultTag].done = true;\n                    out[resultTag].observer.fire();\n                }\n            } else {\n                out[resultTag][okTag] = r[okTag];\n                out[resultTag].done = true;\n                out[resultTag].observer.fire();\n            }\n        })\n\n        return out;\n    }\n}\n\nconst merge = <T>() => (it: AsyncResult<T, T>) => new Promise<T>(async resolve => {\n    if (await isAsyncOk<T, T>()(it)) {\n        it[resultTag].observer.once(() => resolve(it[resultTag][okTag]))\n    } else {\n        it[resultTag].observer.once(() => resolve(it[resultTag][errorTag]))\n    }\n})\n\nconst AsyncResults = {\n    map,\n    mapErr,\n    of: toAsyncResult,\n    getAsyncOk,\n    getAsyncErr,\n    unwrap,\n    $: asyncResultOkCompose,\n    $AsyncErr: asyncResultErrCompose,\n    merge\n}\n\nexport default AsyncResults","import AsyncResults, { AsyncResult } from \"./async-result\";\nimport Compose from \"./compose\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function asyncResultOkCompose<E, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T2, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T3, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T4, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T5, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T6, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T7, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T8, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T9, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T10, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T11, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T12, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T13, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T14, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T15, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T16, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T17, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T18, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T19, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T20, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T21, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T22, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T23, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T24, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T25, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T26, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T27, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T28, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T29, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T30, E>\n\n\nexport function asyncResultOkCompose(...fns: any[]) {\n    return AsyncResults.map((Compose.$ as any)(...fns));\n}\n","import AsyncResults, { AsyncResult } from \"./async-result\";\nimport Compose from \"./compose\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function asyncResultErrCompose<O, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T2>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T3>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T4>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T5>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T6>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T7>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T8>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T9>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T10>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T11>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T12>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T13>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T14>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T15>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T16>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T17>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T18>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T19>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T20>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T21>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T22>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T23>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T24>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T25>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T26>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T27>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T28>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T29>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T30>\n\n\nexport function asyncResultErrCompose(...fns: any[]) {\n    return AsyncResults.mapErr((Compose.$ as any)(...fns));\n}\n","import Compose from \"./compose\";\nimport { leftCompose } from \"./either-left-compose.gen\";\nimport { rightCompose } from \"./either-right-compose.gen\";\nimport { okCompose } from \"./result-ok-compose.gen\";\n\nconst eitherTag = Symbol('Either');\nconst leftTag = Symbol('Left');\nconst rightTag = Symbol('Right');\n\nclass ResultUnwrapError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\nexport type Either$Left<L, R> = {\n    readonly [eitherTag]: typeof leftTag\n    readonly [leftTag]: L;\n};\nexport type Either$Right<L, R> = {\n    readonly [eitherTag]: typeof rightTag;\n    readonly [rightTag]: R;\n};\n\nexport type Either<L, R> = Either$Left<L, R> | Either$Right<L, R>\n\nexport const Right = <L, R>(right: R): Either<L, R> => ({\n    [eitherTag]: rightTag,\n    [rightTag]: right\n});\n\nexport const Left = <L, R>(left: L): Either<L, R> => ({\n    [eitherTag]: leftTag,\n    [leftTag]: left\n});\n\nexport const isRight = <L, R>(result: Either<L, R>): result is Either$Right<L, R> => eitherTag in result && result[eitherTag] === rightTag\nexport const isLeft = <L, R>(result: Either<L, R>): result is Either$Left<L, R> => eitherTag in result && result[eitherTag] === leftTag\n\n/**\n * @unsafe\n * @throws\n */\n const unwrapRight = <L, R>() => (either: Either<L, R>): R => isRight(either) ? either[rightTag] : (() => {\n    throw new ResultUnwrapError('Failed to unwrapRight because the given parameter was Either$Left');\n})();\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrapLeft = <L, R>() => (result: Either<L, R>): L => isLeft(result) ? result[leftTag] : (() => {\n    throw new ResultUnwrapError('Failed to unwrapLeft because the given parameter was Either$Right');\n})();\n\nconst getRight = <L, R>() => (right: Either$Right<L, R>): R => unwrapRight<L, R>()(right);\nconst getLeft = <L, R>() => (left: Either$Left<L, R>): L => unwrapLeft<L, R>()(left);\n\nfunction mapLeft<L1, L2, R>(mapper: (it: L1) =>L2): (it: Either<L1, R>) => Either<L2, R>{\n    return (res: Either<L1, R>) => {\n        if (isLeft(res)) {\n            return Left(mapper(getLeft<L1, R>()(res)))\n        }\n    \n        return res\n    }\n}\n\nfunction mapRight<L, R1, R2>(mapper: (it: R1) => R2): (it: Either<L, R1>) => Either<L, R2>{\n    return (res: Either<L, R1>) => {\n        if (isRight(res)) {\n            return Right(mapper(getRight<L, R1>()(res)))\n        }\n    \n        return res\n    }\n}\n\nconst merge = <T>() => (either: Either<T, T>): T => {\n    if (isLeft(either)) {\n        return getLeft<T, T>()(either)\n    } else {\n        return getRight<T, T>()(either)\n    }\n}\n\n\nconst Eithers = {\n    unwrapRight,\n    unwrapLeft,\n    getLeft,\n    getRight,\n    mapRight,\n    mapLeft,\n    $Left: leftCompose,\n    $Right: rightCompose,\n    merge\n}\n\nexport default Eithers","import Compose from \"./compose\";\nimport Eithers, { Either } from \"./either\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function leftCompose<R, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Either<T0, R>) => Either<T2, R>\n\nexport function leftCompose<R, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Either<T0, R>) => Either<T3, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Either<T0, R>) => Either<T4, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Either<T0, R>) => Either<T5, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Either<T0, R>) => Either<T6, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Either<T0, R>) => Either<T7, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Either<T0, R>) => Either<T8, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Either<T0, R>) => Either<T9, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Either<T0, R>) => Either<T10, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Either<T0, R>) => Either<T11, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Either<T0, R>) => Either<T12, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Either<T0, R>) => Either<T13, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Either<T0, R>) => Either<T14, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Either<T0, R>) => Either<T15, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Either<T0, R>) => Either<T16, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Either<T0, R>) => Either<T17, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Either<T0, R>) => Either<T18, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Either<T0, R>) => Either<T19, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Either<T0, R>) => Either<T20, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Either<T0, R>) => Either<T21, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Either<T0, R>) => Either<T22, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Either<T0, R>) => Either<T23, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Either<T0, R>) => Either<T24, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Either<T0, R>) => Either<T25, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Either<T0, R>) => Either<T26, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Either<T0, R>) => Either<T27, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Either<T0, R>) => Either<T28, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Either<T0, R>) => Either<T29, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Either<T0, R>) => Either<T30, R>\n\n\nexport function leftCompose(...fns: any[]) {\n    return Eithers.mapLeft((Compose.$ as any)(...fns));\n}\n","import Compose from \"./compose\";\nimport Eithers, { Either } from \"./either\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function rightCompose<L, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Either<L, T0>) => Either<L, T2>\n\nexport function rightCompose<L, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Either<L, T0>) => Either<L, T3>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Either<L, T0>) => Either<L, T4>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Either<L, T0>) => Either<L, T5>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Either<L, T0>) => Either<L, T6>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Either<L, T0>) => Either<L, T7>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Either<L, T0>) => Either<L, T8>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Either<L, T0>) => Either<L, T9>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Either<L, T0>) => Either<L, T10>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Either<L, T0>) => Either<L, T11>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Either<L, T0>) => Either<L, T12>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Either<L, T0>) => Either<L, T13>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Either<L, T0>) => Either<L, T14>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Either<L, T0>) => Either<L, T15>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Either<L, T0>) => Either<L, T16>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Either<L, T0>) => Either<L, T17>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Either<L, T0>) => Either<L, T18>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Either<L, T0>) => Either<L, T19>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Either<L, T0>) => Either<L, T20>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Either<L, T0>) => Either<L, T21>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Either<L, T0>) => Either<L, T22>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Either<L, T0>) => Either<L, T23>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Either<L, T0>) => Either<L, T24>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Either<L, T0>) => Either<L, T25>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Either<L, T0>) => Either<L, T26>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Either<L, T0>) => Either<L, T27>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Either<L, T0>) => Either<L, T28>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Either<L, T0>) => Either<L, T29>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Either<L, T0>) => Either<L, T30>\n\n\nexport function rightCompose(...fns: any[]) {\n    return Eithers.mapRight((Compose.$ as any)(...fns));\n}\n"],"names":["$14f4fa6fb980dde9$export$f672e0b6f7222cd7","fns","it","reduce","value","f","$14f4fa6fb980dde9$export$2e2bcd8739ae039","$","debug","msg","logger","p","o","m","console","log","$3825157aca910587$var$optionTag","Symbol","$3825157aca910587$var$noneTag","$3825157aca910587$var$someTag","$3825157aca910587$export$a97188f46719f5cf","Error","$3825157aca910587$export$5d7e502287836e58","option","$3825157aca910587$export$e56af863d5645d5f","$3825157aca910587$export$57ca7e07b341709d","$3825157aca910587$export$9f9d0139d032da4f","$3825157aca910587$var$unwrap","$3825157aca910587$var$fromSome","some","$3825157aca910587$export$2e2bcd8739ae039","mapper","opt","of","obj","opts","allowNull","allowUndefined","undefined","get","map","$e8311124b7d8df6d$var$resultTag","$e8311124b7d8df6d$var$errorTag","$e8311124b7d8df6d$var$okTag","$e8311124b7d8df6d$export$61720c0b3b91cede","constructor","uncaught","message","super","$e8311124b7d8df6d$export$3659d3f2d3dfceb8","e","$e8311124b7d8df6d$export$8146e38189b4f4dc","$e8311124b7d8df6d$export$71a04ee6075aae31","result","$e8311124b7d8df6d$export$5edd8010b0a12d92","$e8311124b7d8df6d$var$unwrap","$e8311124b7d8df6d$var$fromOk","ok","$e8311124b7d8df6d$var$fromErr","err","$e8311124b7d8df6d$var$unwrapErr","$e8311124b7d8df6d$var$toResult","fn","$e8311124b7d8df6d$export$2e2bcd8739ae039","getOk","getErr","res","$Err","mapErr","either","$bdbd943e52c3b6c8$var$sorter","asc","left","right","Number","localeCompare","desc","$bdbd943e52c3b6c8$export$2e2bcd8739ae039","array","filter","find","every","customSort","sort","elem","prefix","forEach","i","divisor","dividend","length","arrayOfArrays","flat","flatMap","defaultValue","at","slice","reduceRight","initialValue","delimiter","join","reverse","acc","exp","Math","pow","base","size","out","subarray","push","str","split","by","byRem","otherArray","eq","greaterThan","lowerThan","greaterThanEqual","lowerThanEqual","_","idx","object","Object","entries","key","a","b","$aedcb952f6c0f258$export$2e2bcd8739ae039","listeners","done","once","this","fire","static","obs","setTimeout","$e82713ebcab83590$var$resultTag","$e82713ebcab83590$var$errorTag","$e82713ebcab83590$var$okTag","$e82713ebcab83590$export$26488ec8b94a287d","$e82713ebcab83590$export$846b91adab566cc","error","observer","nextLoop","$e82713ebcab83590$export$c116642f75095b84","$e82713ebcab83590$export$99c77b96f7177b2b","Promise","resolve","isOk","reject","$e82713ebcab83590$export$12df862902fd97dd","isErr","$e82713ebcab83590$var$unwrap","async","$e82713ebcab83590$export$2e2bcd8739ae039","r","mappedResult","then","catch","finally","$e82713ebcab83590$var$unwrapErr","$AsyncErr","$0f393f65ae2d7505$var$eitherTag","$0f393f65ae2d7505$var$leftTag","$0f393f65ae2d7505$var$rightTag","$0f393f65ae2d7505$var$ResultUnwrapError","$0f393f65ae2d7505$export$19db0165690c701a","$0f393f65ae2d7505$export$37c4d04eafdc5515","$0f393f65ae2d7505$export$a9d71693f0c1a85d","$0f393f65ae2d7505$export$d649b6842e09f2b","$0f393f65ae2d7505$var$unwrapRight","$0f393f65ae2d7505$var$unwrapLeft","$0f393f65ae2d7505$var$getRight","$0f393f65ae2d7505$var$getLeft","$0f393f65ae2d7505$export$2e2bcd8739ae039","$Left","mapLeft","$Right","mapRight"],"version":3,"file":"index.js.map"}