{"mappings":"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","sources":["index.ts","array.ts","option.ts","option-compose.gen.ts","compose.ts","result.ts","result-err-compose.gen.ts","result-ok-compose.gen.ts","async-result.ts","async-result-err-compose.gen.ts","async-result-ok-compose.gen.ts","observer.ts","either.ts","either-left-compose.gen.ts","either-right-compose.gen.ts"],"sourcesContent":["export * from './array'\nexport * from './async-result'\nexport * from './result'\nexport * from './either'\nexport * from './option'\nexport * from './compose'","import Options, { Some, Option, None } from \"./option\";\nimport Results, { Err } from \"./result\";\n\nconst map = <T, E>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => E) => (array: T[]) => array.map(fn);\nconst filter = <T>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => boolean) => (array: T[]): T[] => array.filter(fn);\nconst find = <T>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => boolean) => (array: T[]) => Options.of(array.find(fn));\nconst every = <T>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => boolean) => (array: T[]) => array.every(fn);\nconst some = <T>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => boolean) => (array: T[]) => array.some(fn);\nconst reduce = <T, E>(fn: (accumulator: E, elem: T) => E, initialValue: E) => (array: T[]) => array.reduce(fn, initialValue)\nconst reduceRight = <T, E>(fn: (accumulator: E, elem: T) => E, initialValue: E) => (array: T[]) => array.reduceRight(fn, initialValue)\nconst foldl = <T>(fn: (left: T, right: T) => T, defaultValue: T) => (array: T[]) => array.length === 0 ? defaultValue : array.reduce(fn, array.at(0))\nconst foldr = <T>(fn: (left: T, right: T) => T, defaultValue: T) => (array: T[]) => array.length === 0\n    ? defaultValue\n    : array.slice(0, -1).reduceRight(fn, array.at(array.length - 1))\nconst isEmpty = <T>() => (array: T[]): boolean => array.length === 0\nconst fromString = (delimiter: string) => (str: string) => str.split(delimiter)\nconst join = (delimiter: string = '') => (array: string[]) => array.join(delimiter)\nconst sum = () => (array: number[]) => array.reduce((acc, it) => it + acc, 0)\nconst product = () => (array: number[]) => array.reduce((acc, it) => it * acc, 1)\nconst pow = (exp: number) => (array: number[]) => array.map(it => Math.pow(it, exp))\nconst powOf = (base: number) => (array: number[]) => array.map(it => Math.pow(base, it))\n/** Returns Result$Err if divisor === 0 */\nconst divBy = (divisor: number) => (array: number[]) => array.map(it => divisor === 0 ? Err(new Error('division by zero')) : Results.of(() => it / divisor))\n/** Returns Result$Err if any element === 0 */\nconst divOf = (dividend: number) => (array: number[]) => array.map(it => it === 0 ? Err(new Error('division by zero')) : Results.of(() => dividend / it))\nconst tuple = <T>(size = 2) => (array: T[]) => {\n    const out: Option<T>[][] = [];\n    for (let i = 0; i < array.length; i += size) {\n        const subarray: Option<T>[] = array.slice(i, i + size).map(Some)\n        while (subarray.length < size) {\n            subarray.push(None())\n        }\n        out.push(subarray)\n    }\n    return out;\n}\nconst flat = <T>() => (arrayOfArrays: T[][]): T[] => arrayOfArrays.flat()\nconst flatMap = <T, E>(fn: (elem: T, idx: number, array: ReadonlyArray<T>) => E[]) => (array: T[]): E[] => array.flatMap(fn)\nconst first = <T>() => (array: T[]) => array.length === 0 ? None() : Some(array[0])\nconst last = <T>() => (array: T[]) => array.length === 0 ? None() : Some(array.at(array.length - 1))\nconst append = <T>(elem: T) => (array: T[]) => [...array, elem];\nconst prepend = <T>(elem: T) => (array: T[]) => [elem, ...array];\nconst reverse = <T>() => (array: T[]) => [...array].reverse();\nconst between = (greaterThan: number, lowerThan: number) => (array: number[]) => array.filter(it => it > greaterThan && it < lowerThan)\nconst betweenEq = (greaterThanEqual: number, lowerThanEqual: number) => (array: number[]) => array.filter(it => it >= greaterThanEqual && it <= lowerThanEqual)\nconst gt = (greaterThan: number) => (array: number[]) => array.filter(it => it > greaterThan)\nconst gte = (greaterThanEqual: number) => (array: number[]) => array.filter(it => it >= greaterThanEqual)\nconst lt = (lowerThan: number) => (array: number[]) => array.filter(it => it < lowerThan)\nconst lte = (lowerThanEqual: number) => (array: number[]) => array.filter(it => it <= lowerThanEqual)\nconst debug = <T>(prefix: string = '') => (array: T[]) => {\n    array.forEach((it, i) => console.log(`debug${ prefix ? `[${prefix}]` : '' }[${i}] =`, it))\n    return [...array]\n}\nconst shiftr = <T>(by: number = 1) => ([...array]: T[]) => {\n    if (array.length === 0) {\n        return array\n    }\n\n    const byRem = by % array.length\n    return [...array.slice(array.length - byRem, array.length), ...array.slice(0, array.length - byRem)]\n}\nconst shiftl = <T>(by: number = 1) => ([...array]: T[]) => {\n    if (array.length === 0) {\n        return array\n    }\n\n    const byRem = by % array.length\n    return [...array.slice(array.length - byRem, array.length), ...array.slice(0, array.length - byRem)]\n}\n\ntype PrimitiveType<T> = T extends number\n    ? number\n    : T extends string\n    ? string\n    : T extends boolean\n    ? boolean\n    : never\n\nconst sorter = {\n    asc: <T>(left: PrimitiveType<T>, right: PrimitiveType<T>): number => {\n        if (typeof left !== typeof right) {\n            throw new Error(`Sort Error. Left and right elements are not the same type. Left is ${left} and right is ${right}`)\n        }\n\n        if (typeof left === 'number') {\n            return left - (right as number);\n        }\n\n        if (typeof left === 'boolean') {\n            return Number(left) - Number(right)\n        }\n\n        if (typeof left === 'string') {\n            return left.localeCompare(right as string)\n        }\n\n        throw new Error('Unreachable');\n    },\n    desc: <T>(left: PrimitiveType<T>, right: PrimitiveType<T>): number => sorter.asc(left, right) * (-1)\n};\n\n\nconst sort = <T>(fn: (left: T, right: T) => number = sorter.asc, customSort?: (array: T[], compare: (left: T, right: T) => number) => T[]) =>\n    (array: T[]) =>\n        customSort\n        ? customSort([...array], fn)\n        : [...array].sort(fn);\n\ntype Indexable = number | string | symbol \nconst concat = <T>(otherArray: T[]) => (array: T[]) => [...array, ...otherArray];\nconst toObject = <T>(fn: ((elem: T, idx: number) => Indexable) = (_, idx) => idx) => (array: T[]): Record<Indexable, T> =>\n    array.map((it, idx) => ({[fn(it, idx)]: it}))\n        .reduce((acc, it) => ({ ...acc, ...it }), {})\nconst fromObject = <T>(fn: (key: Indexable) => number) => (object: Record<Indexable, T>) =>\n    Object.entries(object)\n        .map(([key, value]) => [fn(key), value])\n        .sort(([a]: [number, T], [b]: [number, T]) => a - b)\n        .map(([_, it]: [number, T]) => it)\n\nconst uniqueBy = <T>(eq: (a: T, b: T) => boolean) => (array: T[]) => {\n    const out: T[] = [];\n    for (const elem of array) {\n        const found = out.some(it => eq(it, elem))\n        if (!found) {\n            out.push(elem)\n        }\n    }\n    return out\n}\n\nconst unique = <T>() => (array: PrimitiveType<T>[]): T[] => {\n    const out: PrimitiveType<T>[] = [];\n    for (const elem of array) {\n        const found = out.some(it => it === elem)\n        if (!found) {\n            out.push(elem)\n        }\n    }\n    return out as any\n}\n\nconst Arrays = {\n    map,\n    filter,\n    find,\n    some,\n    every,\n    sort,\n    sorter,\n    append,\n    debug,\n    divBy,\n    divOf,\n    first,\n    flat,\n    flatMap,\n    foldl,\n    foldr,\n    reduce,\n    reduceRight,\n    last,\n    prepend,\n    join,\n    reverse,\n    isEmpty,\n    sum,\n    product,\n    pow,\n    powOf,\n    tuple,\n    fromString,\n    shiftr,\n    shiftl,\n    concat,\n    unique,\n    uniqueBy,\n    between,\n    betweenEq,\n    gt,\n    lt,\n    gte,\n    lte,\n    toObject,\n    fromObject\n}\n\nexport default Arrays","import { optionCompose } from \"./option-compose.gen\";\n\nconst optionTag = Symbol('Option');\nconst noneTag = Symbol('None');\nconst someTag = Symbol('Some');\n\nexport class OptionUnwrapError extends Error {}\n\nexport type Option$None = {\n    readonly [optionTag]: typeof noneTag\n};\nexport type Option$Some<T> = {\n    readonly [optionTag]: typeof someTag;\n    readonly [someTag]: T;\n};\nexport type Option<T> = Option$None | Option$Some<T>;\n\n\n\nexport const isSome = <T>(option: Option<T | Option<T>>): option is Option$Some<T> => optionTag in option && option[optionTag] === someTag\nexport const isNone = <T>(option: Option<T | Option<T>>): option is Option$None => optionTag in option && option[optionTag] === noneTag\n\nexport const None = <T>(): Option<T> => ({ [optionTag]: noneTag });\n\nexport function Some<T>(value: T | Option<T>): Option<T> {\n    if (typeof value === 'object' && optionTag in value) {\n        return value as any;\n    }\n\n    return {\n        [optionTag]: someTag,\n        [someTag]: value as any\n    } as any;\n}\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrap = <T>(option: Option<T>): T => isSome(option) ? option[someTag] : (() => {\n    throw new OptionUnwrapError();\n})() as any;\n\nconst fromSome = <T>(some: Option$Some<T>): T => unwrap(some);\n\ninterface ToOptionArgs {\n    allowUndefined?: boolean;\n    allowNull?: boolean;\n}\nconst toOption = <T>(obj: T | undefined | null, opts: ToOptionArgs = {}): Option<T> => {\n    if ((opts.allowNull && obj === null) || (opts.allowUndefined && obj === undefined) || (obj !== undefined && obj !== null)) {\n        return Some(obj) as any;\n    }\n\n    return None()\n}\n\nfunction map<T, E>(mapper: (it: T) => E | Option<E>): (it: Option<T>) => Option<E> {\n    return (opt: Option<T>) => {\n        if (isSome(opt)) {\n            return Some(mapper(fromSome(opt)))\n        }\n    \n        return None()\n    }\n}\n\nconst Options = {\n    map,\n    of: toOption,\n    unwrap,\n    get: fromSome,\n    $: optionCompose\n}\n\nexport default Options","import Compose from \"./compose\";\nimport Options, { Option } from \"./option\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function optionCompose<T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Option<T0>) => Option<T2>\n\nexport function optionCompose<T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Option<T0>) => Option<T3>\n\nexport function optionCompose<T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Option<T0>) => Option<T4>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Option<T0>) => Option<T5>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Option<T0>) => Option<T6>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Option<T0>) => Option<T7>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Option<T0>) => Option<T8>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Option<T0>) => Option<T9>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Option<T0>) => Option<T10>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Option<T0>) => Option<T11>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Option<T0>) => Option<T12>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Option<T0>) => Option<T13>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Option<T0>) => Option<T14>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Option<T0>) => Option<T15>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Option<T0>) => Option<T16>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Option<T0>) => Option<T17>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Option<T0>) => Option<T18>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Option<T0>) => Option<T19>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Option<T0>) => Option<T20>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Option<T0>) => Option<T21>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Option<T0>) => Option<T22>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Option<T0>) => Option<T23>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Option<T0>) => Option<T24>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Option<T0>) => Option<T25>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Option<T0>) => Option<T26>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Option<T0>) => Option<T27>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Option<T0>) => Option<T28>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Option<T0>) => Option<T29>\n\nexport function optionCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Option<T0>) => Option<T30>\n\n\nexport function optionCompose(...fns: any[]) {\n    return Options.map((Compose.$ as any)(...fns));\n}\n","type PipeFn<I, O> = (input: I) => O;\n\nexport function compose<In, Out> (fn1: PipeFn<In, Out>): (input: In) => Out;\nexport function compose<In, Out, A = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, Out>\n): (input: In) => Out\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, Out>\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never, W = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, W>,\n    fn24: PipeFn<W, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never, W = never, X = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, W>,\n    fn24: PipeFn<W, X>,\n    fn25: PipeFn<X, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never, W = never, X = never, Y = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, W>,\n    fn24: PipeFn<W, X>,\n    fn25: PipeFn<X, Y>,\n    fn26: PipeFn<Y, Out>,\n): (input: In) => Out\n\nexport function compose<In, Out, A = never, B = never, C = never, D = never, E = never, F = never, G = never, H = never, I = never, J = never, K = never, L = never, M = never, N = never, O = never, P = never, Q = never, R = never, S = never, T = never, U = never, V = never, W = never, X = never, Y = never, Z = never> (\n    fn1: PipeFn<In, A>,\n    fn2: PipeFn<A, B>,\n    fn3: PipeFn<B, C>,\n    fn4: PipeFn<C, D>,\n    fn5: PipeFn<D, E>,\n    fn6: PipeFn<E, F>,\n    fn7: PipeFn<F, G>,\n    fn8: PipeFn<G, H>,\n    fn9: PipeFn<H, I>,\n    fn10: PipeFn<I, J>,\n    fn11: PipeFn<J, K>,\n    fn12: PipeFn<K, L>,\n    fn13: PipeFn<L, M>,\n    fn14: PipeFn<M, N>,\n    fn15: PipeFn<N, O>,\n    fn16: PipeFn<O, P>,\n    fn17: PipeFn<P, Q>,\n    fn18: PipeFn<Q, R>,\n    fn19: PipeFn<R, S>,\n    fn20: PipeFn<S, T>,\n    fn21: PipeFn<T, U>,\n    fn22: PipeFn<U, V>,\n    fn23: PipeFn<V, W>,\n    fn24: PipeFn<W, X>,\n    fn25: PipeFn<X, Y>,\n    fn26: PipeFn<Y, Z>,\n    fn27: PipeFn<Z, Out>,\n): (input: In) => Out;\nexport function compose(...fns) {\n    return it => fns.reduce((value, f) => f(value), it);\n}\n\nconst Compose = {\n    $: compose,\n    debug: <T>(msg?: string, logger: (prefix: string, obj: any, msg?: string) => void = (p, o, m) => console.log(p, m, o)) => (it: T): T => {\n        logger(`pipe.debug`, it, msg || '');\n        return it\n    }\n}\nexport default Compose;\n","import { errCompose } from \"./result-err-compose.gen\";\nimport { okCompose } from \"./result-ok-compose.gen\";\n\nconst resultTag = Symbol('result');\nconst errorTag = Symbol('error');\nconst okTag = Symbol('ok');\n\nexport class ResultUnwrapError extends Error {\n    constructor(public uncaught: any, message?: string) {\n        super(message);\n    }\n}\n\nexport type Result$Error<T, E> = {\n    readonly [resultTag]: typeof errorTag\n    readonly [errorTag]: E;\n};\nexport type Result$Ok<T, E> = {\n    readonly [resultTag]: typeof okTag;\n    readonly [okTag]: T;\n};\n\nexport type Result<T, E = Error> = Result$Error<T, E> | Result$Ok<T, E>\n\nexport const Err = <T, E = Error>(e: E): Result<T, E> => ({\n    [resultTag]: errorTag,\n    [errorTag]: e\n});\n\nexport const Ok = <T, E = Error>(value: T): Result<T, E> => ({\n    [resultTag]: okTag,\n    [okTag]: value\n});\n\nexport const isOk = <T, E>(result: Result<T, E>): result is Result$Ok<T, E> => resultTag in result && result[resultTag] === okTag\nexport const isErr = <T, E>(result: Result<T, E>): result is Result$Error<T, E> => resultTag in result && result[resultTag] === errorTag\n\n/**\n * @unsafe\n * @throws\n */\n const unwrap = <T, E>() => (result: Result<T, E>): T => isOk(result) ? result[okTag] : (() => {\n    throw new ResultUnwrapError(result[errorTag]);\n})();\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrapErr = <T, E>() => (result: Result<T, E>): E => isErr(result) ? result[errorTag] : (() => {\n    throw new ResultUnwrapError(result[okTag]);\n})();\n\nconst fromOk = <T, E>() => (ok: Result$Ok<T, E>): T => unwrap<T, E>()(ok);\nconst fromErr = <T, E>() => (err: Result$Error<T, E>): E => unwrapErr<T, E>()(err);\nconst toResult = <T, E = Error>(fn: () => T): Result<T, E> => {\n    try {\n        return Ok(fn())\n    } catch(e) {\n        return Err(e)\n    }\n}\n\nfunction map<O1, O2, E>(mapper: (it: O1) => O2): (it: Result<O1, E>) => Result<O2, E>{\n    return (res: Result<O1, E>) => {\n        if (isOk(res)) {\n            return toResult(() => mapper(fromOk<O1, E>()(res)))\n        }\n    \n        return Err(res[errorTag])\n    }\n}\n\nfunction mapErr<O, E1, E2>(mapper: (it: E1) => E2): (it: Result<O, E1>) => Result<O, E2>{\n    return (res: Result<O, E1>) => {\n        if (isErr(res)) {\n            return Err(mapper(fromErr<O, E1>()(res)))\n        }\n    \n        return res\n    }\n}\n\nconst merge = <T>() => (either: Result<T, T>): T => {\n    if (isOk(either)) {\n        return fromOk<T, T>()(either)\n    } else {\n        return fromErr<T, T>()(either)\n    }\n}\n\nconst Results = {\n    unwrap,\n    getOk: fromOk,\n    getErr: fromErr,\n    of: toResult,\n    map,\n    mapErr,\n    $: okCompose,\n    $Err: errCompose,\n    merge\n}\n\nexport default Results","import Compose from \"./compose\";\nimport Results, { Result } from \"./result\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function errCompose<O, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Result<O, T0>) => Result<O, T2>\n\nexport function errCompose<O, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Result<O, T0>) => Result<O, T3>\n\nexport function errCompose<O, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Result<O, T0>) => Result<O, T4>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Result<O, T0>) => Result<O, T5>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Result<O, T0>) => Result<O, T6>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Result<O, T0>) => Result<O, T7>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Result<O, T0>) => Result<O, T8>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Result<O, T0>) => Result<O, T9>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Result<O, T0>) => Result<O, T10>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Result<O, T0>) => Result<O, T11>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Result<O, T0>) => Result<O, T12>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Result<O, T0>) => Result<O, T13>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Result<O, T0>) => Result<O, T14>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Result<O, T0>) => Result<O, T15>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Result<O, T0>) => Result<O, T16>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Result<O, T0>) => Result<O, T17>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Result<O, T0>) => Result<O, T18>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Result<O, T0>) => Result<O, T19>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Result<O, T0>) => Result<O, T20>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Result<O, T0>) => Result<O, T21>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Result<O, T0>) => Result<O, T22>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Result<O, T0>) => Result<O, T23>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Result<O, T0>) => Result<O, T24>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Result<O, T0>) => Result<O, T25>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Result<O, T0>) => Result<O, T26>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Result<O, T0>) => Result<O, T27>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Result<O, T0>) => Result<O, T28>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Result<O, T0>) => Result<O, T29>\n\nexport function errCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Result<O, T0>) => Result<O, T30>\n\n\nexport function errCompose(...fns: any[]) {\n    return Results.mapErr((Compose.$ as any)(...fns));\n}\n","import Compose from \"./compose\";\nimport Results, { Result } from \"./result\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function okCompose<T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Result<T0>) => Result<T2>\n\nexport function okCompose<T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Result<T0>) => Result<T3>\n\nexport function okCompose<T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Result<T0>) => Result<T4>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Result<T0>) => Result<T5>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Result<T0>) => Result<T6>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Result<T0>) => Result<T7>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Result<T0>) => Result<T8>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Result<T0>) => Result<T9>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Result<T0>) => Result<T10>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Result<T0>) => Result<T11>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Result<T0>) => Result<T12>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Result<T0>) => Result<T13>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Result<T0>) => Result<T14>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Result<T0>) => Result<T15>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Result<T0>) => Result<T16>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Result<T0>) => Result<T17>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Result<T0>) => Result<T18>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Result<T0>) => Result<T19>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Result<T0>) => Result<T20>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Result<T0>) => Result<T21>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Result<T0>) => Result<T22>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Result<T0>) => Result<T23>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Result<T0>) => Result<T24>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Result<T0>) => Result<T25>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Result<T0>) => Result<T26>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Result<T0>) => Result<T27>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Result<T0>) => Result<T28>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Result<T0>) => Result<T29>\n\nexport function okCompose<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Result<T0>) => Result<T30>\n\n\nexport function okCompose(...fns: any[]) {\n    return Results.map((Compose.$ as any)(...fns));\n}\n","import { asyncResultErrCompose } from \"./async-result-err-compose.gen\";\nimport { asyncResultOkCompose } from \"./async-result-ok-compose.gen\";\nimport Observer from \"./observer\";\n\nconst resultTag = Symbol('async-result');\nconst errorTag = Symbol('error');\nconst okTag = Symbol('ok');\n\nexport class AsyncResultUnwrapError extends Error {\n    constructor(private uncaught: any, message?: string) {\n        super(message);\n    }\n}\n\nexport type AsyncResult$Error<_T, E> = {\n    readonly [resultTag]: {\n        done: boolean;\n        observer: Observer;\n        [errorTag]?: E\n    };\n};\nexport type AsyncResult$Ok<T, _E> = {\n    readonly [resultTag]: {\n        done: boolean;\n        observer: Observer;\n        [okTag]?: T;\n    };\n};\n\nexport type AsyncResult<T, E = Error> = AsyncResult$Error<T, E> | AsyncResult$Ok<T, E>\n\nexport const AsyncErr = <T, E = Error>(error?: E): AsyncResult<T, E> => {\n    const err = {\n        [resultTag]: {\n            done: false,\n            observer: Observer.nextLoop(() => {\n                err[resultTag][errorTag] = error;\n                err[resultTag].done = true;\n            })\n        }\n    }\n\n    return err\n}\n\nexport const AsyncOk = <T, E = Error>(value: T): AsyncResult<T, E> => {\n    const ok = {\n        [resultTag]: {\n            done: false,\n            observer: Observer.nextLoop(() => {\n                ok[resultTag][okTag] = value;\n                ok[resultTag].done = true;\n            })\n        }\n    }\n\n    return ok\n}\n\nexport const isAsyncOk = <T, E>() => (result: AsyncResult<T, E>): Promise<[true, AsyncResult$Ok<T, E>] | [false, AsyncResult$Error<T, E>]> => {\n    if (typeof result !== 'object' || !(resultTag in result)) {\n        return Promise.reject(new Error(`Given parameter ${result} is not a valid AsyncResult`));\n    }\n\n    return new Promise(resolve => {\n        result[resultTag].observer.once(() => {\n            const isOk = okTag in result[resultTag]\n            resolve([isOk, result])\n        });\n    });\n}\n\nexport const isAsyncErr = () => <T, E>(result: AsyncResult<T, E>): Promise<[true, AsyncResult$Error<T, E>] | [false, AsyncResult$Ok<T, E>]> => {\n    if (typeof result !== 'object' || !(resultTag in result)) {\n        return Promise.reject(new Error(`Given parameter ${result} is not a valid AsyncResult`));\n    }\n\n    return new Promise(resolve => {\n        result[resultTag].observer.once(() => {\n            const isErr = errorTag in result[resultTag]\n            resolve([isErr, result])\n        });\n    });\n}\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrap =  async <T, E>(result: AsyncResult<T, E>): Promise<T> => {\n    const [isOk, res] = await isAsyncOk()(result);\n    if (isOk) {\n        return res[resultTag][okTag] as T;\n    } else {\n        return Promise.reject(res[resultTag][errorTag]);\n    }\n}\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrapErr =  async <T, E>(result: AsyncResult<T, E>): Promise<E> => {\n    const [isErr, res] = await isAsyncErr()(result);\n    if (isErr) {\n        return res[resultTag][errorTag] as E;\n    } else {\n        return Promise.reject(res[resultTag][okTag]);\n    }\n}\n\nconst getAsyncOk = <T, E>(ok: AsyncResult$Ok<T, E>): Promise<T> => unwrap(ok);\nconst getAsyncErr = <T, E>(err: AsyncResult$Error<T, E>): Promise<E> => unwrapErr(err);\nconst toAsyncResult = <T, E = Error>(fn: () => Promise<T>): AsyncResult<T, E> => {\n    const res = {\n        [resultTag]: {\n            done: false,\n            observer: new Observer()\n        }\n    }\n\n    fn().then(ok => {\n        res[resultTag][okTag] = ok\n    }).catch(err => {\n        res[resultTag][errorTag] = err\n    }).finally(() => {\n        res[resultTag].done = true;\n        res[resultTag].observer.fire()\n    })\n\n    return res;\n}\n\nfunction map<O1, E, O2>(mapper: (it: O1) => O2 | AsyncResult<O2, E>): (it: AsyncResult<O1, E>) => AsyncResult<O2, E> {\n    return (res: AsyncResult<O1, E>): AsyncResult<O2, E> => {\n        const r = res[resultTag];\n        const out = {\n            [resultTag]: {\n                done: false,\n                observer: new Observer()\n            }\n        }\n\n        r.observer.once(() => {\n            if (okTag in r) {\n                try {\n                    const mappedResult = mapper(r[okTag]);\n\n                    if (typeof mappedResult === \"object\" && resultTag in mappedResult) {\n                        mappedResult[resultTag].observer.once(() => {\n                            if (okTag in mappedResult[resultTag]) {\n                                out[resultTag][okTag] = mappedResult[resultTag][okTag];\n                            } else {\n                                out[resultTag][errorTag] = mappedResult[resultTag][errorTag];\n                            }\n\n                            out[resultTag].done = true;\n                            out[resultTag].observer.fire();\n                        })\n                    } else {\n                        out[resultTag][okTag] = mappedResult;\n                        out[resultTag].done = true;\n                        out[resultTag].observer.fire();\n                    }\n\n                } catch(e) {\n                    out[resultTag][errorTag] = e;\n                    out[resultTag].done = true;\n                    out[resultTag].observer.fire();\n                }\n            } else {\n                out[resultTag][errorTag] = r[errorTag];\n                out[resultTag].done = true;\n                out[resultTag].observer.fire();\n            }\n        })\n\n        return out;\n    }\n}\n\nfunction mapErr<O, E1, E2>(mapper: (it: E1) => E2 | AsyncResult<O, E2>): (it: AsyncResult<O, E1>) => AsyncResult<O, E2> {\n    return (res: AsyncResult<O, E1>): AsyncResult<O, E2> => {\n        const r = res[resultTag];\n        const out = {\n            [resultTag]: {\n                done: false,\n                observer: new Observer()\n            }\n        }\n\n        r.observer.once(() => {\n            if (errorTag in r) {\n                try {\n                    const mappedResult = mapper(r[errorTag]);\n\n                    if (typeof mappedResult === \"object\" && resultTag in mappedResult) {\n                        mappedResult[resultTag].observer.once(() => {\n                            if (errorTag in mappedResult[resultTag]) {\n                                out[resultTag][errorTag] = mappedResult[resultTag][errorTag];\n                            } else {\n                                out[resultTag][okTag] = mappedResult[resultTag][okTag];\n                            }\n\n                            out[resultTag].done = true;\n                            out[resultTag].observer.fire();\n                        })\n                    } else {\n                        out[resultTag][errorTag] = mappedResult;\n                        out[resultTag].done = true;\n                        out[resultTag].observer.fire();\n                    }\n\n                } catch(e) {\n                    out[resultTag][okTag] = r[okTag];\n                    out[resultTag].done = true;\n                    out[resultTag].observer.fire();\n                }\n            } else {\n                out[resultTag][okTag] = r[okTag];\n                out[resultTag].done = true;\n                out[resultTag].observer.fire();\n            }\n        })\n\n        return out;\n    }\n}\n\nconst merge = <T>() => (it: AsyncResult<T, T>) => new Promise<T>(async resolve => {\n    if (await isAsyncOk<T, T>()(it)) {\n        it[resultTag].observer.once(() => resolve(it[resultTag][okTag]))\n    } else {\n        it[resultTag].observer.once(() => resolve(it[resultTag][errorTag]))\n    }\n})\n\nconst AsyncResults = {\n    map,\n    mapErr,\n    of: toAsyncResult,\n    getAsyncOk,\n    getAsyncErr,\n    unwrap,\n    $: asyncResultOkCompose,\n    $AsyncErr: asyncResultErrCompose,\n    merge\n}\n\nexport default AsyncResults","import AsyncResults, { AsyncResult } from \"./async-result\";\nimport Compose from \"./compose\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function asyncResultErrCompose<O, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T2>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T3>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T4>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T5>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T6>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T7>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T8>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T9>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T10>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T11>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T12>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T13>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T14>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T15>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T16>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T17>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T18>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T19>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T20>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T21>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T22>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T23>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T24>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T25>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T26>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T27>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T28>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T29>\n\nexport function asyncResultErrCompose<O, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: AsyncResult<O, T0>) => AsyncResult<O, T30>\n\n\nexport function asyncResultErrCompose(...fns: any[]) {\n    return AsyncResults.mapErr((Compose.$ as any)(...fns));\n}\n","import AsyncResults, { AsyncResult } from \"./async-result\";\nimport Compose from \"./compose\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function asyncResultOkCompose<E, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T2, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T3, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T4, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T5, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T6, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T7, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T8, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T9, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T10, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T11, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T12, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T13, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T14, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T15, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T16, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T17, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T18, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T19, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T20, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T21, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T22, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T23, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T24, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T25, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T26, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T27, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T28, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T29, E>\n\nexport function asyncResultOkCompose<E, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: AsyncResult<T0, E>) => AsyncResult<T30, E>\n\n\nexport function asyncResultOkCompose(...fns: any[]) {\n    return AsyncResults.map((Compose.$ as any)(...fns));\n}\n","type ListenerFn = () => any \n\nexport default class Observer {\n    private listeners: ListenerFn[] = []\n    private done = false;\n\n    once(fn: ListenerFn) {\n        if (this.done) {\n            fn();\n            return;\n        }\n\n        this.listeners.push(fn)\n    }\n\n    fire() {\n        this.done = true;\n        this.listeners.forEach(fn => fn())\n        this.listeners = [];\n    }\n\n    static nextLoop(fn: ListenerFn): Observer {\n        const obs = new Observer()\n        obs.once(fn)\n        setTimeout(() => obs.fire());\n        return obs;\n    }\n}","import Compose from \"./compose\";\nimport { leftCompose } from \"./either-left-compose.gen\";\nimport { rightCompose } from \"./either-right-compose.gen\";\nimport { okCompose } from \"./result-ok-compose.gen\";\n\nconst eitherTag = Symbol('Either');\nconst leftTag = Symbol('Left');\nconst rightTag = Symbol('Right');\n\nclass ResultUnwrapError extends Error {\n    constructor(message?: string) {\n        super(message);\n    }\n}\n\nexport type Either$Left<L, R> = {\n    readonly [eitherTag]: typeof leftTag\n    readonly [leftTag]: L;\n};\nexport type Either$Right<L, R> = {\n    readonly [eitherTag]: typeof rightTag;\n    readonly [rightTag]: R;\n};\n\nexport type Either<L, R> = Either$Left<L, R> | Either$Right<L, R>\n\nexport const Right = <L, R>(right: R): Either<L, R> => ({\n    [eitherTag]: rightTag,\n    [rightTag]: right\n});\n\nexport const Left = <L, R>(left: L): Either<L, R> => ({\n    [eitherTag]: leftTag,\n    [leftTag]: left\n});\n\nexport const isRight = <L, R>(result: Either<L, R>): result is Either$Right<L, R> => eitherTag in result && result[eitherTag] === rightTag\nexport const isLeft = <L, R>(result: Either<L, R>): result is Either$Left<L, R> => eitherTag in result && result[eitherTag] === leftTag\n\n/**\n * @unsafe\n * @throws\n */\n const unwrapRight = <L, R>() => (either: Either<L, R>): R => isRight(either) ? either[rightTag] : (() => {\n    throw new ResultUnwrapError('Failed to unwrapRight because the given parameter was Either$Left');\n})();\n\n/**\n * @unsafe\n * @throws\n */\nconst unwrapLeft = <L, R>() => (result: Either<L, R>): L => isLeft(result) ? result[leftTag] : (() => {\n    throw new ResultUnwrapError('Failed to unwrapLeft because the given parameter was Either$Right');\n})();\n\nconst getRight = <L, R>() => (right: Either$Right<L, R>): R => unwrapRight<L, R>()(right);\nconst getLeft = <L, R>() => (left: Either$Left<L, R>): L => unwrapLeft<L, R>()(left);\n\nfunction mapLeft<L1, L2, R>(mapper: (it: L1) =>L2): (it: Either<L1, R>) => Either<L2, R>{\n    return (res: Either<L1, R>) => {\n        if (isLeft(res)) {\n            return Left(mapper(getLeft<L1, R>()(res)))\n        }\n    \n        return res\n    }\n}\n\nfunction mapRight<L, R1, R2>(mapper: (it: R1) => R2): (it: Either<L, R1>) => Either<L, R2>{\n    return (res: Either<L, R1>) => {\n        if (isRight(res)) {\n            return Right(mapper(getRight<L, R1>()(res)))\n        }\n    \n        return res\n    }\n}\n\nconst merge = <T>() => (either: Either<T, T>): T => {\n    if (isLeft(either)) {\n        return getLeft<T, T>()(either)\n    } else {\n        return getRight<T, T>()(either)\n    }\n}\n\n\nconst Eithers = {\n    unwrapRight,\n    unwrapLeft,\n    getLeft,\n    getRight,\n    mapRight,\n    mapLeft,\n    $Left: leftCompose,\n    $Right: rightCompose,\n    merge\n}\n\nexport default Eithers","import Compose from \"./compose\";\nimport Eithers, { Either } from \"./either\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function leftCompose<R, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Either<T0, R>) => Either<T2, R>\n\nexport function leftCompose<R, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Either<T0, R>) => Either<T3, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Either<T0, R>) => Either<T4, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Either<T0, R>) => Either<T5, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Either<T0, R>) => Either<T6, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Either<T0, R>) => Either<T7, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Either<T0, R>) => Either<T8, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Either<T0, R>) => Either<T9, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Either<T0, R>) => Either<T10, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Either<T0, R>) => Either<T11, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Either<T0, R>) => Either<T12, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Either<T0, R>) => Either<T13, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Either<T0, R>) => Either<T14, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Either<T0, R>) => Either<T15, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Either<T0, R>) => Either<T16, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Either<T0, R>) => Either<T17, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Either<T0, R>) => Either<T18, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Either<T0, R>) => Either<T19, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Either<T0, R>) => Either<T20, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Either<T0, R>) => Either<T21, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Either<T0, R>) => Either<T22, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Either<T0, R>) => Either<T23, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Either<T0, R>) => Either<T24, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Either<T0, R>) => Either<T25, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Either<T0, R>) => Either<T26, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Either<T0, R>) => Either<T27, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Either<T0, R>) => Either<T28, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Either<T0, R>) => Either<T29, R>\n\nexport function leftCompose<R, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Either<T0, R>) => Either<T30, R>\n\n\nexport function leftCompose(...fns: any[]) {\n    return Eithers.mapLeft((Compose.$ as any)(...fns));\n}\n","import Compose from \"./compose\";\nimport Eithers, { Either } from \"./either\";\n\ntype PipeFn<In, Out> = (it: In) => Out;\n\nexport function rightCompose<L, T0, T1, T2> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n): (input: Either<L, T0>) => Either<L, T2>\n\nexport function rightCompose<L, T0, T1, T2, T3> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n): (input: Either<L, T0>) => Either<L, T3>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n): (input: Either<L, T0>) => Either<L, T4>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n): (input: Either<L, T0>) => Either<L, T5>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n): (input: Either<L, T0>) => Either<L, T6>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n): (input: Either<L, T0>) => Either<L, T7>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n): (input: Either<L, T0>) => Either<L, T8>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n): (input: Either<L, T0>) => Either<L, T9>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n): (input: Either<L, T0>) => Either<L, T10>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n): (input: Either<L, T0>) => Either<L, T11>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n): (input: Either<L, T0>) => Either<L, T12>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n): (input: Either<L, T0>) => Either<L, T13>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n): (input: Either<L, T0>) => Either<L, T14>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n): (input: Either<L, T0>) => Either<L, T15>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n): (input: Either<L, T0>) => Either<L, T16>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n): (input: Either<L, T0>) => Either<L, T17>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n): (input: Either<L, T0>) => Either<L, T18>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n): (input: Either<L, T0>) => Either<L, T19>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n): (input: Either<L, T0>) => Either<L, T20>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n): (input: Either<L, T0>) => Either<L, T21>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n): (input: Either<L, T0>) => Either<L, T22>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n): (input: Either<L, T0>) => Either<L, T23>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n): (input: Either<L, T0>) => Either<L, T24>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n): (input: Either<L, T0>) => Either<L, T25>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n): (input: Either<L, T0>) => Either<L, T26>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n): (input: Either<L, T0>) => Either<L, T27>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n): (input: Either<L, T0>) => Either<L, T28>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n): (input: Either<L, T0>) => Either<L, T29>\n\nexport function rightCompose<L, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> (\n    fn0: PipeFn<T0, T1>,\n    fn1: PipeFn<T1, T2>,\n    fn2: PipeFn<T2, T3>,\n    fn3: PipeFn<T3, T4>,\n    fn4: PipeFn<T4, T5>,\n    fn5: PipeFn<T5, T6>,\n    fn6: PipeFn<T6, T7>,\n    fn7: PipeFn<T7, T8>,\n    fn8: PipeFn<T8, T9>,\n    fn9: PipeFn<T9, T10>,\n    fn10: PipeFn<T10, T11>,\n    fn11: PipeFn<T11, T12>,\n    fn12: PipeFn<T12, T13>,\n    fn13: PipeFn<T13, T14>,\n    fn14: PipeFn<T14, T15>,\n    fn15: PipeFn<T15, T16>,\n    fn16: PipeFn<T16, T17>,\n    fn17: PipeFn<T17, T18>,\n    fn18: PipeFn<T18, T19>,\n    fn19: PipeFn<T19, T20>,\n    fn20: PipeFn<T20, T21>,\n    fn21: PipeFn<T21, T22>,\n    fn22: PipeFn<T22, T23>,\n    fn23: PipeFn<T23, T24>,\n    fn24: PipeFn<T24, T25>,\n    fn25: PipeFn<T25, T26>,\n    fn26: PipeFn<T26, T27>,\n    fn27: PipeFn<T27, T28>,\n    fn28: PipeFn<T28, T29>,\n    fn29: PipeFn<T29, T30>,\n): (input: Either<L, T0>) => Either<L, T30>\n\n\nexport function rightCompose(...fns: any[]) {\n    return Eithers.mapRight((Compose.$ as any)(...fns));\n}\n"],"names":[],"version":3,"file":"index.js.map"}